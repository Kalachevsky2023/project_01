# -*- coding: utf-8 -*-
"""HomeWorkTask

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DfoEeVnyyld7WysYmNDnAlwnW7amhElC
"""

# Задача 1.1

# Первый трек
my_favorite_songs = ' , '
first_song = my_favorite_songs.split(',')[0]
print(first_song) # Выводит первый трек из списка
# Последний трек
last_song = my_favorite_songs.split(',')[-1]
print(last_song) # Выводит последний трек из списка
# Второй трек
second_song = my_favorite_songs.split(',')[1]
print(second_song) # Выводит второй трек из списка
# Предпоследний трек
second_last_song = my_favorite_songs.split(',')[-2]
print(second_last_song) # Выводит предпоследний трек из списка

# Задача 1.2

# Пункт А
my_favorite_songs = [
    ['Waste a Moment', 3.03],
    ['New Salvation', 4.02],
    ['Staying\' Alive', 3.40],
    ['Out of Touch', 3.03],
    ['A Sorta Fairytale', 5.28],
    ['Easy', 4.15],
    ['Beautiful Day', 4.04],
    ['Nowhere to Run', 2.58],
    ['In This World', 4.02],
]
sum = 0.0
a = [ ]
for i in my_favorite_songs:
    a.append(i[1])
    sum = sum + i[1] # сумма длительнности всех треков

print('Три песни звучат ' + 'sum ' + 'минут')

# Задача 1.3

n = int(input('Введите номер месяца: '))
if n == 1:
    print('Вы ввели январь.31 дней')
elif n == 2:
    print('Вы ввели февраль.28 дней')
elif n == 3:
    print('Вы ввели март.31 дней')
elif n == 4:
    print('Вы ввели апрель.30 дней')
elif n == 5:
    print('Вы ввели май.31 дней')
elif n == 6:
    print('Вы ввели июнь.30 дней')
elif n == 7:
    print('Вы ввели июль.31 дней')
elif n == 8:
    print('Вы ввели август.31 дней')
elif n == 9:
    print('Вы ввели сентябрь.30 дней')
elif n == 10:
    print('Вы ввели октябрь.31 дней')
elif n == 11:
    print('Вы ввели ноябрь.30 дней')
elif n == 12:
    print('Вы ввели декабрь.31 дней')
else:
    print('Такого месяца нет')

# Задача 1.4
# Есть словарь кодов товаров titles



= названия {

'Кроссовки тип 3 (Adidas)': '100000110',

'Мячик тип 2 (Adidas)': '100000146',

'Кепка тип 1 (Adidas)': '100000149',

'Ремень тип 2 (Nike)': '100000194',

'Футболка тип 1 (Adidas)': '100000224',

'Шапка тип 5 (Puma)': '100000280',

}



# Товары находятся на складе и сохранены в виде словаря списков словарей,

# которые отражают количество товаров в магазине по каждому коду.



= магазин {

'100000110': [{'количество': 31, 'цена': 1637}],

'100000146': [ {'количество': 4, 'цена': 45}, {'количество': 10, 'цена': 48}],

'100000149': [ {'количество': 28, 'цена': 279}, {'количество': 32, 'цена': 291}],

'100000194': [{'количество': 8, 'цена': 220}, {'количество': 1, 'цена': 170}],

'100000224': [{'количество': 61, 'цена': 438}, {'количество': 23, 'цена': 302}, {'количество': 50, 'цена': 412}],

'100000280': [{'количество': 26, 'цена': 175}, ]

}



# Рассчитайте на какую сумму лежит каждого товара на складе.

#

# Вывести суммарную стоимость каждого товара в магазине в формате:

# "<товар> - <кол-во> шт, стоимость <общая стоимость> руб"



# Пример: "Кроссовки тип 3 (Adidas) - 31 шт, стоимость 50747 руб"

название для, коды в названиях.предметы():
    total_cost = 0
    for code in codes.split(','):
        for item in store[code]:
            total_cost += item['quantity'] * item['price']
    print(f"{title} - {sum([item['quantity'] for item in store[code]])} шт,стоимость
{total_cost} руб")

# Задача 2.1

# Создайте две функции maximum и minimum,
# которые получают список целых чисел в качестве входных данных
# и возвращают наибольшее и наименьшее число в этом списке соответственно.
# Например,
# * [4,6,2,1,9,63,-134,566]         -> max = 566, min = -134
# * [-52, 56, 30, 29, -54, 0, -110] -> min = -110, max = 56
# * [42, 54, 65, 87, 0]             -> min = 0, max = 87
# * [5]                             -> min = 5, max = 5
# функции sorted, max и min использовать нельзя!

def minimum(arr):
    pass

def maximum(arr):
    pass

# Задача 2.2

# Напишите функцию, которая возвращает номер квартал по номеру месяца
# Например:
# месяц 2 (февраль) является частью первого квартала;
# месяц 6 (июнь) является частью второго квартала;
# месяц 11 (ноябрь) является частью четвертого квартала.

# def quarter_of(month):
   # pass

month = int(input())
if month > 0 and month < 4:
    print('месяц' + month + 'является частью первого квартала')
elif month > 3 and month < 7:
    print('месяц' + month + 'является частью второго квартала')
elif month > 6 and month < 10:
    print('месяц' + month + 'является частью третьего квартала')
else:
    print('месяц' + month + 'является частью четвертого квартала')

# Задача 2.3


# Напишите функцию, которая принимает цифры от 0 до 9 и возвращает значение прописью.
# Например,
# switch_it_up(1) -> 'One'
# switch_it_up(3) -> 'Three'
# switch_it_up(10000) -> None
# Использовать условный оператор if-elif-else нельзя!

def switch_it_up(number):
    pass
  switch_it_up def(число):
      = слова {
          0: 'ноль',
          1: 'один',
          2: 'два',
          3: 'три',
          4: 'четыре',
          5: 'пять',
          6: 'шесть',
          7: 'семь',
          8: 'восемь',
          9: 'девять',
      }
      слова возвращаются.получаем(число)
печать(switch_it_up(n))

# Задача 2.4

# Пункт A.
# Напишите функцию, которая удаляет все восклицательные знаки из заданной строк.
# Например,
# foo("Hi! Hello!") -> "Hi Hello"
# foo("") -> ""
# foo("Oh, no!!!") -> "Oh, no"

def remove_exclamation_marks(s):
    pass


# Пункт B.
# Удалите восклицательный знак из конца строки.
# remove("Hi!") == "Hi"
# remove("Hi!!!") == "Hi!!"
# remove("!Hi") == "!Hi"

def remove_last_em(s):
    pass


# Дополнительно

# Пункт С.
# Удалите слова из предложения, если они содержат ровно один восклицательный знак.
# Слова разделены одним пробелом.
# Например,
# remove("Hi!") === ""
# remove("Hi! Hi!") === ""
# remove("Hi! Hi! Hi!") === ""
# remove("Hi Hi! Hi!") === "Hi"
# remove("Hi! !Hi Hi!") === ""
# remove("Hi! Hi!! Hi!") === "Hi!!"
# remove("Hi! !Hi! Hi!") === "!Hi!"

def remove_word_with_one_em(s):
    pass

s = 'Привет!, Привет'
удалить def(s):
' ' вернуться.присовединиться(w к w в s.разделить(), если w.сосчитать(!) !=1)
распечатать(удалить(s))

# Задача 3.1

# Создайте класс матрицы (или таблицы).
# Требования к классу:
#   - каждая колонка является числом от 1 до n (n любое число, которые вы поставите!)
#   - в каждой ячейке содержится либо число, либо None
#   - доступы следующие методы матрицы:
#       * принимать новые значения,
#       * заменять существующие значения,
#       * выводить число строк и колонок.

# Пример матрицы 10 на 10 из единиц:
# [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

# Примечание!
#   - новый класс не запрещено строить на базе существующих типов данных: списков, словарей и тд.
#   - отображать в таблице/матрице название колонки не обязательно!
#   - использовать готовые классы numpy.array() и pandas.DataFrame() запрещено!
#   - проявите фантазию :)

# Задача 4.1

# Домашнее задание на SQL

# В базе данных teacher создайте таблицу Students

# Структура таблицы: Student_Id - Integer, Student_Name - Text, School_Id - Integer (Primary key)

# Наполните таблицу следующими данными:

# 201, Иван, 1
# 202, Петр, 2
# 203, Анастасия, 3
# 204, Игорь, 4

# Напишите программу, с помощью которой по ID студента можно получать информацию о школе и студенте.

# Формат вывода:

# ID Студента:
# Имя студента:
# ID школы:
# Название школы:

import sqlite3
connection = sqlite3.connect("teachers.db")
# создание таблицы Students
cursor = connection.cursor()
query = """CREATE TABLE Students (
Student_Id - Integer NOT NULL,
Student_Name - Text NOT NULL,
School_Id Integer NOT NULL Primary Key);"""
cursor.execute(query)
connection.commit( )
connection.close( )